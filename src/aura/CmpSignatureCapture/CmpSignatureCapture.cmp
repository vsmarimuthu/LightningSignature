<!-- Component: 	CmpSignatureCapture -->
<!-- Created by: 	OpFocus(Veena Sundara-Heragu) on 2/14/19 -->
<!-- Description: 	 -->
<aura:component description="CmpSignatureCapture"
                controller="CmpSignatureCaptureCtrl"
                access="global">

    <aura:attribute name="name" type="String" access="public" required="true"/>
    <aura:attribute name="fileName" type="String" access="public" description="Name of file to be saved"></aura:attribute>
    <aura:attribute name="recordId" type="String" access="public" description="recordId to link saved file to"></aura:attribute>
    <aura:attribute name="class" type="String" access="public"/>
    <aura:attribute name="pen-color" type="String" access="public"/>
    <aura:attribute name="pen-width" type="Integer" access="public"/>
    <aura:attribute name="background-color" type="String" access="public"/>
    <aura:attribute name="signatureLine-color" type="String" access="public" description="color for line below signature"/>
    <aura:attribute name="showClearButton" type="Boolean" default="true" access="public"/>
    <aura:attribute name="showSaveButton" type="Boolean" default="true" access="public"/>
    <aura:attribute name="readOnly" type="Boolean" default="false" access="public"/>
    <aura:attribute name="showSignatureLine" type="Boolean" default="false" access="public" description="line to sign on"/>
    <aura:attribute name="signatureText" type="String" default="false" access="public" description="text below line to sign on"/>
    <aura:attribute name="signatureTextFont" type="String" default="false" access="public" description="font for text below line to sign on"/>

    <aura:attribute name="loadedFileData" type="String" default="false" access="private" description="data of file that is currently loaded"/>

    <aura:attribute name="error" type="String" access="private"/>
    <aura:attribute name="showSpinner" type="Boolean" access="private" default="false"/>


    <!-- methods -->
    <aura:method name="clear" action="{!c.clear}" description="clear current contents"/>

    <aura:method name="createImage" action="{!c.createImage}" description="will return html image">
        <aura:attribute name="format" type="String"></aura:attribute>
    </aura:method>

    <aura:method name="capture" action="{!c.capture}" description="returns dataurl based on specified format">
        <aura:attribute name="format" type="String" description="svg, svgbase64 or image"></aura:attribute>
    </aura:method>

    <aura:method name="createFile" action="{!c.createFile}" description="creates salesforce file and links to recordId if specified">
        <aura:attribute name="fileName" type="String" description="name of salesforce file. .png will be appended"></aura:attribute>
        <aura:attribute name="recordId" type="String" description="recordId to link the file to"></aura:attribute>
    </aura:method>

    <aura:method name="isEmpty" description="is there anything drawn?">
        <aura:attribute name="format" type="String" description="native, svg, svgbase64 or image"></aura:attribute>
    </aura:method>

    <aura:method name="loadFile" action="{!c.loadFile}" description="loads image from salesforce file (must be png)">
        <aura:attribute name="fileName" type="String" description="name of salesforce file."></aura:attribute>
        <aura:attribute name="contentDocumentId" type="Id" description="Id of ContentDocument. Provide one of these args and not both"></aura:attribute>
    </aura:method>


    <!-- events -->
    <aura:registerEvent name="EvtCmpSignatureFileCreated" type="c:EvtCmpSignatureFileCreated" description="Salesforce file has been created. Will give contentDocumentId and fileName"/>
    <aura:registerEvent name="EvtCmpSignatureChanged" type="c:EvtCmpSignatureChanged" description="some change happened to the signature"/>
    <aura:registerEvent name="EvtCmpSignatureCleared" type="c:EvtCmpSignatureCleared" description="signature has been cleared"/>
  

    <aura:handler name="EvtCmpSignatureChanged" event="c:EvtCmpSignatureChanged" action="{!c.change}" description="to clear error as soon as signature changes"/>

    <aura:handler name="change" value="{!v.readOnly}" action="{!c.readOnlyChanged}"/>
    <aura:handler name="change" value="{!v.signatureText}" action="{!c.signatureTextChanged}"/>
    <aura:handler name="change" value="{!v.signatureTextFont}" action="{!c.signatureTextFontChanged}"/>
    <aura:handler name="change" value="{!v.showSignatureLine}" action="{!c.showSignatureLineChanged}"/>

    <!--<ltng:require-->
            <!--scripts="{!join(',',-->
            <!--$Resource.jSignature_Brinley + '/jSignature-master/libs/jquery.js',-->
            <!--$Resource.jSignature_Brinley + '/jSignature-master/libs/jSignatureOpfocus.js')}"-->
            <!--afterScriptsLoaded="{!c.scriptsLoaded}" />-->

    <ltng:require
            scripts="{!join(',',
            $Resource.jQuery,
            $Resource.jSignature_Brinley + '/jSignature-master/libs/jSignatureOpfocus.js')}"
            afterScriptsLoaded="{!c.scriptsLoaded}" />


    <div class="slds-is-relative">
        <lightning:spinner aura:id="mySpinner" variant="brand" size="small" alternativeText="waiting"
                           class="{!v.showSpinner ? '' : 'slds-hide'}"/>
    </div>


    <!-- javascript will load signature component into this div -->
    <div id="{!v.name + '_signature'}" class="{!v.class}">
    </div>

    <div class="slds-clearfix slds-m-top_x-small">
        <aura:if isTrue="{!v.error}">
            <div class="slds-float_left error">
                {!v.error}
            </div>
        </aura:if>
        <div class="slds-float_right" style="margin-top: -1.5rem; margin-right: .25rem;">
            <aura:if isTrue="{!v.showClearButton}">
                <lightning:buttonIcon iconName="utility:undo" variant="bare" onclick="{! c.clear }" alternativeText="Clear" />
            </aura:if>
            <aura:if isTrue="{!v.showSaveButton}">
                <lightning:buttonIcon iconName="utility:save" variant="bare" onclick="{! c.save }" alternativeText="Save" />
            </aura:if>
        </div>
    </div>



</aura:component>
